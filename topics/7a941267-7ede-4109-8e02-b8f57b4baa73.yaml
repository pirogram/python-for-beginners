id: 7a941267-7ede-4109-8e02-b8f57b4baa73
type: markdown
text: |
  Before we wind up the chapter on _list-of-values_, we'll look at one final data structure that is list-like: `set`. How is it different from `list` and `tuple` data structures? Here are the key differences:
  * In a `set`, items are unique. If you put `1`, `2`, `4` & `2` in a `set`, you would get back `1`, `2` & `4`. No duplicates. Unlike a `list` or `tuple` that can have duplicate values.
  * `set` does not maintain order within the values. So, if you add `1`, `2` & `4` and then iterate over values, you can get them in any order. Unlike `list` and `tuple` that maintain the order within values.
  * `set` is mutable just like `list`. You can add items, remove items etc.

  Since, a `set` does not maintain any order within the values, it's not really list-like. Conceptually, a list of items has an inherent order within the items. `set` is more like a bag of items. You can put items in the bag and when you draw them one by one, they can come in order.

  Let's look at a few examples to understand `set` better.

---
type: live-code
id: 23627830-72cf-4b8a-88eb-de92fd2b129f
code: |
  # create an empty set. add a few numbers to the set.
  unique_numbers = set()

  unique_numbers.add(1)
  unique_numbers.add(2)
  unique_numbers.add(4)
  unique_numbers.add(2)

  print(unique_numbers)

--- |

  There are quite a few things to notice here. You can create an empty set with `set()`. To add values, you use the `.add()` method unlike `list` which uses `.append()` or `.insert()` methods. Why is that so? Because a `set` does not have any order among the items. `.append()` and `.insert()` make an assumption that you are adding the item at a specific position in the sequence.

  Another thing you would notice is the lack of duplicate entries. We added `2` twice but there is only entry for `2` in the set.

  So, what's the point of having `set`? Why can't we just use `list` for everything? `set` and `list` have a very different way of organizing the values internally. As a result of that, `set` is very very fast when it comes to finding out whether a given value is in the set or not and it so happens that we often run into this kind of situation.

  Let's solve a small problem where we can put `set` to use.

---
type: testless-coding-question
id: 77ef7d83-bd2f-4080-b0a2-bd61e1648f85
question: |
  Keep asking the user to enter a number till the user enters `0`. Print the set of unique numbers that user entered. Use `set` for the same.
code: |
  # your code goes here

