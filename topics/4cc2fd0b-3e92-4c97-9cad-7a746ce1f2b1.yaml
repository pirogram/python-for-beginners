id: 4cc2fd0b-3e92-4c97-9cad-7a746ce1f2b1
type: markdown
text: |
  `Map` is a concept. It's just a way of thinking. There are various data structures that can be used to organize _map-like_ information. `dict` is one of them.

  So, how do you organize information in a `dict` data structure and how do you work with it? Let's go back to the Hogwarts example where Dumbledore is recording the height measurements for different students.

---
type: live-code
id: 5688ec3d-bd40-4039-95af-8cb092fc0b07
code: |
  students = {
    'Harry': 90,
    'Hermione': 85,
    'Ron': 92,
    'Malfoy': 91
  }

  print(students)

--- |
  We can look at some more examples to organize information as a dictionary.
---
type: live-code
id: 28fd97c8-6546-4a81-93ba-9d9469b18746
code: |
  email = {
    'From': 'Superman',
    'To': 'Batman',
    'Subject': 'Flying Competition',
    'Body': 'I can fly faster and longer. You wanna bet?''
  }

  print(email)
---
type: live-code
id: 8d7676d9-b9e3-4a35-a705-ac94d907913b
code: |
  grocery_items = {
    'potatoes': 20,
    'tomatoes': 12,
    'eggs': 18,
    'apples': 6
  }

  print(grocery_items)
---
type: live-code
id: 1b31281a-f1d5-4dd7-8e97-a22551fdb992
code: |
  books = {
    'Harry Potter and the Goblet of Fire': 'J K Rowling',
    'Lord of the Rings': 'J R R Tolkien',
    'A Song of Fire and Ice': 'George R R Martin'
  }

  print(books)
--- |
  We'll now work on convincing ourselves that `dict` is a better than `list` to organize _map-like_ information. For that, we'll look at various operations that we need to perform on _map-like_ information and see how they are better done with `dict` compared to a `list`. For that, we'll work with the Hogwarts students example.

  ## Membership Check

  First, let's see if we can find out if Dumbledore already measured a students' height or not. The following code asks the user to enter a student's name and then tell whether that student's height has been measured or not.

---
type: live-code
id: 50d8b40b-4fb6-4236-ae68-31a811d2891d
code: |
  students = {
    'Harry': 90,
    'Hermione': 85,
    'Ron': 92,
    'Malfoy': 91
  }

  name = input("Enter a student's name: ")
  if name in students:
    print('Height for', name, 'has been measured')
  else:
    print('Height for', name, 'has not been measured')

--- |
  ## Indexed by Key

  How do we tell the height of a particular student?
---
type: live-code
id: bcd3fc6d-9d19-45a3-9e91-913bef42498f
code: |
  students = {
    'Harry': 90,
    'Hermione': 85,
    'Ron': 92,
    'Malfoy': 91
  }

  name = input("Enter a student's name: ")
  if name not in students:
    print('Height for', name, 'was not measured.')
  else:
    print('Height for', name, 'is', students[name])

--- |
  The main thing here is the `students[name]` on last line. This would give us the value that's associated with `name`. E.g. if we give `students['Ron']`, we would get `92` because that's the value associated with the key `'Ron'`.

  In a way, the syntax here is very list-like. The way you can think is that a `list` is indexed by a sequence of numbers starting from `0` and this sequence is automatically generated by Python for you. A `dict` is indexed by keys that have been provided by you.

  Another example where we retrieve the number of potatoes from the grocery items:

---
type: live-code
id: 8f71f577-a5d2-4d34-a130-58778deb8981
code: |
  grocery_items = { 'potatoes': 20, 'tomatoes': 12, 'eggs': 18, 'apples': 6 }

  grocery_items['potatoes']

--- |
  One important thing to note here is that mapping is one-way. We map _keys_ to _values_. So, we can index a dictionary by its key and retrieve the value but not the other way round. For example, if we say `grocery_items[20]`, it won't give us `'potatoes'`, it would give us an error because `20` is not a key in the dictionary. You can try it here:

---
type: live-code
id: 0260b94a-a663-4300-83e8-ce0172a680da
code: |
  grocery_items = { 'potatoes': 20, 'tomatoes': 12, 'eggs': 18, 'apples': 6 }

  grocery_items[20]

--- |
  ## Add/Remove/Update

  We'll now look at operations like adding a new entry, updating an existing entry or removing an entry from the dictionary. Here, by entry, we refer to a key-value pair.

  Let's go back to Hogwarts. Dumbledore decided to measure Neville's height as well and he came out to be at `95` cms. How do we add this new entry to existing dictionary?
---
type: live-code
id: 0d6374f2-5621-45fd-aa4f-f0e698c8d2c6
code: |
  students = { 'Harry': 90, 'Hermione': 85, 'Ron': 92, 'Malfoy': 91 }

  students['Neville'] = 95

  students
--- |
  It was as simple as assigning value `95` to the key `'Neville'`. We can also add `8 oranges` to grocery items in a similar way:

---
type: live-code
id: 665a9fbc-a712-44e1-9ed7-30f8038d1013
code: |
  grocery_items = { 'potatoes': 20, 'tomatoes': 12, 'eggs': 18, 'apples': 6 }

  grocery_items['oranges'] = 8

  grocery_items
--- |

  What if we want to update an existing entry? For example, Ron's height was measured incorrectly and we want to update it to `93` (from `92`).

---
type: live-code
id: 0d6374f2-5621-45fd-aa4f-f0e698c8d2c6
code: |
  students = { 'Harry': 90, 'Hermione': 85, 'Ron': 92, 'Malfoy': 91 }

  students['Ron'] = 93

  students
--- |
  When we assign a value to a key, if the key already exists, the value gets updated. Otherwise, a new key is added to the dictionary.

  *Note:* _All keys in a dictionary are unique._ If you assign a value to an existing key, you'll overwrite the previous value.

  Let's say, we decided to remove `'eggs'` from the grocery. How do we do that?
---
type: live-code
id: 05de29a6-3b10-4dae-b4fb-a4317543ed2c
code: |
  grocery_items = { 'potatoes': 20, 'tomatoes': 12, 'eggs': 18, 'apples': 6 }

  del grocery_items['eggs']

  grocery_items
---
type: testless-coding-question
id: aa3d61d7-73ee-4854-9ebf-b1aaad6d7594
question: |
  Following information is about an email that I received from Superman. Convert this information into a dictionary.

  ```
  From: Superman
  To: Manas Garg
  Subject: Hi There!
  Date: Day 44 of Galactic Year 1203
  Message: It's high time I start learning programming. How do I get going?
  ```
code: |
  # your code goes here
---
type: categorization-question
id: ed9f68a7-8256-411c-a199-f459f5f8ff94
question: |
  Based on the following code, please select the right answer from dropdown.

  ```python
  closet_items = {
      "shirts": 16,
      "jeans": 5,
      "shorts": 3,
      "t-shirts": 7,
      "socks": 9
  }

  closet_items['ties'] = 2
  closet_items['shorts'] = 4
  ```
mappings:
  - challenge: "closet_items['shirts']?"
    answer: 16
  - challenge: "closet_items['shorts']?"
    answer: 4
  - challenge: "closet_items.get('t-shirts')?"
    answer: 7
  - challenge: "closet_items['ties']?"
    answer: 2
  - challenge: "closet_items.get('shoes')?"
    answer: This generates an error
  - challenge: "closet_items.get('shoes', 4)"
    answer: 4
---
type: testless-coding-question
id: 3b88f2e2-635d-4f17-b3b2-86c639ecb157
question: |
  You are given a dictionary of closet items. Perform various operations on the dictionary so that the closet finally has the following:
  ```Python
  {
      "shirts": 12,
      "jeans": 5,
      "socks": 4,
      "belts": 1
  }
  ```
code: |
  closet_items = {
      "shirts": 16,
      "jeans": 5,
      "shorts": 3,
      "t-shirts": 7,
      "socks": 9
  }
---
type: testless-coding-question
id: 37e71199-fd38-421c-9fdb-4c78878b210b
question: |
  You are given a dictionary of grocery items. Write a program that asks the user to enter grocery item. If the item is in the dictionary, program would print the count of item. Otherwise, it would print that 'item was not found'. Here is a sample:
  ```
  Enter item name: apple
  Found 6 apple.
  ```
  Another example is:
  ```
  Enter item name: kiwi
  Found no kiwi
  ```
code: |
  grocery_items = { 'potato': 20, 'tomato': 12, 'egg': 18, 'apple': 6 }

